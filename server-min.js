const{makeWASocket:makeWASocket,useMultiFileAuthState:useMultiFileAuthState,DisconnectReason:DisconnectReason}=require("@whiskeysockets/baileys"),{Boom:Boom}=require("@hapi/boom"),{createServer:createServer}=require("http"),log=require("pino"),express=require("express"),cors=require("cors"),bodyParser=require("body-parser"),fs=require("fs"),path=require("path"),urlToTemplateAndMedia=require("./templatesUrls.js").urlToTemplateAndMedia,urls=require("./templatesUrls.js").urls,{city:city}=require("./productTemplates.js"),app=express(),server=createServer(app),port=process.env.PORT||8080;let sock;app.use(cors()),app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!0}));let count=0;const reconnect=()=>{connectToWhatsApp()},connectToWhatsApp=async()=>{const{state:e,saveCreds:s}=await useMultiFileAuthState("session_auth_info");sock=makeWASocket({printQRInTerminal:!0,auth:e,logger:log({level:"silent"})}),sock.ev.on("connection.update",handleConnectionUpdate),sock.ev.on("messages.upsert",handleMessageUpsert),sock.ev.on("creds.update",s)},deleteFolder=async e=>{fs.existsSync(e)&&fs.rmSync(e,{recursive:!0,force:!0})},handleDisconnection=async e=>{await deleteFolder(path.join(__dirname,"session_auth_info")),sock&&"open"===sock.state&&sock.logout(),connectToWhatsApp().catch((e=>{}))},handleConnectionUpdate=async e=>{const{connection:s,lastDisconnect:t}=e;if("close"===s){switch(new Boom(t.error).output.statusCode){case DisconnectReason.badSession:await handleDisconnection();break;case DisconnectReason.connectionClosed:case DisconnectReason.connectionLost:case DisconnectReason.restartRequired:case DisconnectReason.timedOut:connectToWhatsApp();break;case DisconnectReason.connectionReplaced:await handleDisconnection();break;case DisconnectReason.loggedOut:await handleDisconnection();break}}},handleMessageUpsert=async({messages:e,type:s})=>{try{if("notify"===s&&!e[0]?.key.fromMe){const s=e[0]?.message?.extendedTextMessage?.contextInfo?.externalAdReply?.sourceUrl||"",t=e?.[0]?.message?.extendedTextMessage?.text||"",n=e[0]?.key?.remoteJid,o=(e,s)=>{for(const[t,n]of Object.entries(e))for(const e of n)if(s.includes(e))return t};let a=o(urls,s+t),c=urlToTemplateAndMedia[a];c&&(await sendMessage(n,c,"product send"),setTimeout((async()=>{await sock.sendMessage(n,{text:city})}),2e3))}}catch(e){}},sendMessage=async(e,s,t)=>{const n=s.media;await sock.sendMessage(e,{image:n,caption:s.template})};connectToWhatsApp().catch((e=>{})),server.listen(port,(()=>{}));